"""
Formats the results of pointsets2grid into files that can be plotted
by GMT.
"""
import os
import json

import click
import numpy as np


def from_params(params):
    """
    Loads interpolation results generated by pointsets2grid and converts
    them to ASCII files that can be plotted by GMT. The files are output
    to the output directory specificed in the config, under a
    subdirectory 'gmt_data'.

    Files written:

      - {method_name}_loc: For each method in the config file, a 
        location file of format `LON LAT WEIGHT` is written. Each row
        is a station/sample location, and the weight is the total 
        relative weighting (dataset weight * sample weight if sample
        weights enabled, else dataset weight).
      - moho_grid: The interpolated depth grid of format `LON LAT DEPTH`.
        Is in a suitable format to be converted to a NetCDF grid by 
        GMT.
      - moho_gradient: The gradient grid of format
        `LON LAT ANGLE MAGNITUDE`. The lon/lat position is the start 
        of the vector tail, the angle is degrees counter-clockwise from
        horizontal and the magnitude is in decimal degrees.

    Parameters
    ----------
    params : seismic.receiver_fn.moho_config.WorkflowParameters 
       Moho workflow parameters. 
    """
    print("Writing data for GMT plotting")

    if not os.path.exists(params.gmt_dir):
        os.mkdir(params.gmt_dir)

    # Convert moho depth grid to GMT digestible format
    with open(params.grid_data, 'r') as fr:
        grid_ds = np.loadtxt(fr, delimiter=',', skiprows=3)
    # Remove std dev column
    grid_ds = np.delete(grid_ds, -1, 1)
    with open(params.gmt_grid_file, 'w') as fw:
        np.savetxt(fw, grid_ds, fmt=['%.6f', '%.6f', '%.2f'], delimiter=' ')

    # Do the same for gradient grid
    with open(params.grad_data, 'r') as fr:
        grad_ds = np.loadtxt(fr, delimiter=',', skiprows=3)
    # Convert to polar coordinates
    r = np.sqrt(grad_ds[:, 2]**2 + grad_ds[:, 3]**2)
    t = np.arctan2(grad_ds[:, 3], grad_ds[:, 2])
    t *= 180.0/np.pi
    grad_ds[:, 2] = t
    grad_ds[:, 3] = r
    with open(params.gmt_grad_file, 'w') as fw:
        np.savetxt(fw, grad_ds, fmt=['%.6f', '%.6f', '%.6f', '%.6f'], delimiter=' ')

    # Output network/method locations and sample weight * dataset weight
    # Total relative weighting can be used as symbol size on maps
    for data in params.method_datasets:
        outfile = params.gmt_loc_file.format(data.name)
        with open(outfile, 'w') as fw:
            fw.write('# lon lat weight depth station\n')
            for i in np.arange(len(data.lon)):
                fw.write('%.6f %.6f %.2f %.6f %s\n'%(data.lon[i], data.lat[i],
                                                     data.total_weight[i], data.val[i],
                                                     data.sta[i]))
    print(f"Complete! Data files saved to '{params.gmt_dir}'")
